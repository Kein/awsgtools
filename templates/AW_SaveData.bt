//---------------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: AW_SaveData.bt
//   Authors: Kein, apocalyptech
//   Version: 0.3
//   Purpose: Parser for Animal Well save game data
//  Category: Game
// File Mask: *.sav
//   History: 
//     0.1a  - Initial release
//     0.3   - Added most of the basic data. Ready to use.
//     0.3.1 - Added Stopwatch, Pedometer, Cring. Minimap and pencil data.
//             Renamed a few things.
//---------------------------------------------------------

// =====================
// DEFINITIONS
// =====================

enum <ubyte> ControllerStyle
{
    PS5=0,
    Xbox,
    Nintendo,
    Keyboard
};

enum <ubyte> Graphics
{
    Good=0,
    Better,
    Best
};

enum <ubyte> Language
{
    English=0,
    Spanish,
    French,
    Italian,
    German,
    Chinese,
    Korean,
    Japanese,
    Portuguese,
    Ukrainian,
    Russian
};

typedef struct {
    uint64 Egg1 : 1;
    uint64 Egg2 : 1;
    uint64 Egg3 : 1;
    uint64 Egg4 : 1;
    uint64 Egg5 : 1;
    uint64 Egg6 : 1;
    uint64 Egg7 : 1;
    uint64 Egg8 : 1;
    uint64 Egg9 : 1;
    uint64 Egg10 : 1;
    uint64 Egg11 : 1;
    uint64 Egg12 : 1;
    uint64 Egg13 : 1;
    uint64 Egg14 : 1;
    uint64 Egg15 : 1;
    uint64 Egg16 : 1;
    uint64 Egg17 : 1;
    uint64 Egg18 : 1;
    uint64 Egg19 : 1;
    uint64 Egg20 : 1;
    uint64 Egg21 : 1;
    uint64 Egg22 : 1;
    uint64 Egg23 : 1;
    uint64 Egg24 : 1;
    uint64 Egg25 : 1;
    uint64 Egg26 : 1;
    uint64 Egg27 : 1;
    uint64 Egg28 : 1;
    uint64 Egg29 : 1;
    uint64 Egg30 : 1;
    uint64 Egg31 : 1;
    uint64 Egg32 : 1;
    uint64 Egg33 : 1;
    uint64 Egg34 : 1;
    uint64 Egg35 : 1;
    uint64 Egg36 : 1;
    uint64 Egg37 : 1;
    uint64 Egg38 : 1;
    uint64 Egg39 : 1;
    uint64 Egg40 : 1;
    uint64 Egg41 : 1;
    uint64 Egg42 : 1;
    uint64 Egg43 : 1;
    uint64 Egg44 : 1;
    uint64 Egg45 : 1;
    uint64 Egg46 : 1;
    uint64 Egg47 : 1;
    uint64 Egg48 : 1;
    uint64 Egg49 : 1;
    uint64 Egg50 : 1;
    uint64 Egg51 : 1;
    uint64 Egg52 : 1;
    uint64 Egg53 : 1;
    uint64 Egg54 : 1;
    uint64 Egg55 : 1;
    uint64 Egg56 : 1;
    uint64 Egg57 : 1;
    uint64 Egg58 : 1;
    uint64 Egg59 : 1;
    uint64 Egg60 : 1;
    uint64 Egg61 : 1;
    uint64 Egg62 : 1;
    uint64 Egg63 : 1;
    uint64 Egg64 : 1;
} Eggs;

typedef struct {
    uint32 Bunny1 : 1;
    uint32 IllegallBunny1 : 1;
    uint32 Bunny3 : 1;
    uint32 Bunny4 : 1;
    uint32 Bunny5 : 1;
    uint32 IllegallBunny2 : 1;
    uint32 Bunny7 : 1;
    uint32 Jungle : 1;
    uint32 Bunny9 : 1;
    uint32 Bunny10 : 1;
    uint32 Bunny11 : 1;
    uint32 ChinChilla : 1;
    uint32 IllegallBunny3 : 1;
    uint32 IllegallBunny4 : 1;
    uint32 IllegallBunny5 : 1;
    uint32 Bunny16 : 1;
    uint32 IllegallBunny6 : 1;
    uint32 IllegallBunny7 : 1;
    uint32 IllegallBunny8 : 1;
    uint32 IllegallBunny9 : 1;
    uint32 IllegallBunny10 : 1;
    uint32 IllegallBunny11 : 1;
    uint32 Bunny23 : 1;
    uint32 IllegallBunny12 : 1;
    uint32 IllegallBunny13 : 1;
    uint32 Bunny26 : 1;
    uint32 IllegallBunny14 : 1;
    uint32 IllegallBunny15 : 1;
    uint32 Bunny29 : 1;
    uint32 IllegallBunny16 : 1;
    uint32 Bunny31 : 1;
    uint32 Bunny32 : 1;

} BunnyData;

typedef struct {
    uint32 Achievement1 : 1;
    uint32 Achievement2 : 1;
    uint32 Achievement3 : 1;
    uint32 Achievement4 : 1;
    uint32 Achievement5 : 1;
    uint32 Achievement6 : 1;
    uint32 Achievement7 : 1;
    uint32 SECRET_RABBIT : 1;
    uint32 Achievement9 : 1;
    uint32 Achievement10 : 1;
    uint32 Achievement11 : 1;
    uint32 Achievement12 : 1;
    uint32 Achievement13 : 1;
    uint32 Achievement14 : 1;
    uint32 Achievement15 : 1;
    uint32 Achievement16 : 1;
    uint32 Achievement17 : 1;
    uint32 Achievement18 : 1;
    uint32 SECRET_EGG : 1;
    uint32 Achievement20 : 1;
    uint32 Achievement21 : 1;
    uint32 Achievement22 : 1;
    uint32 Achievement23 : 1;
    uint32 Achievement24 : 1;
    uint32 Achievement25 : 1;
    uint32 Achievement26 : 1;
    uint32 Achievement27 : 1;
    uint32 Achievement28 : 1;
    uint32 Achievement29 : 1;
    uint32 Achievement30 : 1;
    uint32 Achievement31 : 1;
    uint32 Achievement32 : 1;
} AchievementData;

typedef struct {
    uint64 Flag1 : 1;
    uint64 Flag2 : 1;
    uint64 Flag3 : 1;
    uint64 Flag4 : 1;
    uint64 Flag5 : 1;
    uint64 Flag6 : 1;
    uint64 Flag7 : 1;
    uint64 Flag8 : 1;
    uint64 Flag9 : 1;
    uint64 Flag10 : 1;
    uint64 Flag11 : 1;
    uint64 Flag12 : 1;
    uint64 Flag13 : 1;
    uint64 Flag14 : 1;
    uint64 Flag15 : 1;
    uint64 Flag16 : 1;
    uint64 Flag17 : 1;
    uint64 Flag18 : 1;
    uint64 Flag19 : 1;
    uint64 Flag20 : 1;
    uint64 Flag21 : 1;
    uint64 Flag22 : 1;
    uint64 Flag23 : 1;
    uint64 Flag24 : 1;
    uint64 Flag25 : 1;
    uint64 Flag26 : 1;
    uint64 Flag27 : 1;
    uint64 Flag28 : 1;
    uint64 Flag29 : 1;
    uint64 Flag30 : 1;
    uint64 Flag31 : 1;
    uint64 Flag32 : 1;
    uint64 Flag33 : 1;
    uint64 Flag34 : 1;
    uint64 Flag35 : 1;
    uint64 Flag36 : 1;
    uint64 Flag37 : 1;
    uint64 Flag38 : 1;
    uint64 Flag39 : 1;
    uint64 Flag40 : 1;
    uint64 Flag41 : 1;
    uint64 Flag42 : 1;
    uint64 Flag43 : 1;
    uint64 Flag44 : 1;
    uint64 Flag45 : 1;
    uint64 Flag46 : 1;
    uint64 Flag47 : 1;
    uint64 Flag48 : 1;
    uint64 Flag49 : 1;
    uint64 Flag50 : 1;
    uint64 Flag51 : 1;
    uint64 Flag52 : 1;
    uint64 Flag53 : 1;
    uint64 Flag54 : 1;
    uint64 Flag55 : 1;
    uint64 Flag56 : 1;
    uint64 Flag57 : 1;
    uint64 Flag58 : 1;
    uint64 Flag59 : 1;
    uint64 Flag60 : 1;
    uint64 Flag61 : 1;
    uint64 Flag62 : 1;
    uint64 Flag63 : 1;
    uint64 Flag64 : 1;
} GenericFlags64;

typedef struct
{
    ushort Unknown : 1;
    ushort Firecrackers : 1;
    ushort Flute : 1;
    ushort Lantern : 1;
    ushort Top : 1;
    ushort Disc : 1;
    ushort BWand : 1;
    ushort Yoyo : 1;
    ushort Slink : 1;
    ushort Remote : 1;
    ushort Ball : 1;
    ushort Wheel : 1;
    ushort UVLight : 1;
} Equipment <optimize=false>;

typedef struct
{
    ubyte Unknown1 : 1;
    ubyte Unknown2 : 1;
    ubyte UnknownButUsed : 1;
    ubyte BBwand : 1;
    ubyte Unknown5 : 1;
    ubyte Unknown6 : 1;
    ubyte Unknown7 : 1;
    ubyte Unknown8 : 1;
} Equipment2;


typedef struct
{
    ubyte None : 1;
    ubyte SMedal : 1;
    ubyte UnknownItem1 : 1;
    ubyte HouseKey : 1;
    ubyte OfficeKey : 1;
    ubyte UnusedCageKey : 1;
    ubyte EMedal : 1;
    ubyte FPack : 1;
} OtherItems <optimize=false>;

typedef struct
{
    ubyte None : 1;
    ubyte Map : 1;
    ubyte Stamp : 1;
    ubyte Pencil : 1;
    ubyte Unknown1 : 1;
    ubyte CRing : 1;
    ubyte Unknown2 : 1;
    ubyte Unknown3 : 1;
} AuxularyItem <optimize=false>;




typedef struct
{
    ubyte StopWatch : 1;
    ubyte Pedometer : 1;
    ubyte UnkUnlockable : 1;
    ubyte SouvenirCup : 1;
    ubyte OrigamiFig : 1;
    ubyte Rabbits : 1;
    ubyte Owl : 1;
    ubyte DecorativeRabbit : 1;
    ubyte Fish : 1;
    ubyte Donkey : 1;
    ubyte Cat : 1;
    ubyte MamaCha : 1;
    ubyte Giraffe : 1;
    ubyte IncenseBurner : 1;
    ubyte Peacock : 1;
    ubyte Otter : 1;
    ubyte Duck : 1;
    ubyte Figurine18 : 1 <hidden=true>;
    ubyte Figurine19 : 1 <hidden=true>;
    ubyte Figurine20 : 1 <hidden=true>;
    ubyte Figurine21 : 1 <hidden=true>;
    ubyte Figurine22 : 1 <hidden=true>;
    ubyte Figurine23 : 1 <hidden=true>;
    ubyte Figurine24 : 1 <hidden=true>;
    ubyte Figurine25 : 1 <hidden=true>;
    ubyte Figurine26 : 1 <hidden=true>;
    ubyte Figurine27 : 1 <hidden=true>;
    ubyte Figurine28 : 1 <hidden=true>;
    ubyte Figurine29 : 1 <hidden=true>;
    ubyte Figurine30 : 1 <hidden=true>;
    ubyte Figurine31 : 1 <hidden=true>;
    ubyte Figurine32 : 1 <hidden=true>;
}  Figurines <optimize=false>;

// Header
typedef struct {
    uint32 Version <comment="Save file version">;
    AchievementData Achievements;
    uint32 UnknownData <hidden=true>; // what other shared state is saved?
    ubyte SelectedSaveSlot;
    ubyte SaveHash <write=WriteHash, comment="This needs to be updated every time before you load the file!">;
    ushort Unk <hidden=true>;  // always 00?
    Figurines Unlockables <comment="Both figurines and global items">;
    uint32 Reserved <hidden=true>; // seems to be reserved data
    
} Header <optimize=false>;

// Options

typedef struct {
    ubyte Scanlines : 1;
    ubyte Fullscreen : 1;
    ubyte ShowTime : 1;
    ubyte ShowSteps : 1;
    ubyte Vibration : 1;
    ubyte UnknownOption : 1;
    ubyte Flashing : 1;
    ubyte OverrideStyle : 1;
    ubyte SwapCancel : 1;
    ubyte IgnoreBGInput : 1;
    ubyte UnknownOption2 : 1;
    Language Lang;
    ubyte Unk[5] <hidden=true>;
    float SFX;
    float Music;
    ControllerStyle GamepadStyle;
    Graphics GFX;
    ubyte Unk2[38] <hidden=true>;
} Options <optimize=false>;


// SLOTS

typedef struct {
    ushort Year;
    ubyte Month;
    ubyte Day;
    ubyte Hour;
    ubyte Minutes;
    ubyte Seconds;
    ubyte Unknown <hidden=true>;
} Timestamp <optimize=false>;


typedef struct {
    uint32 X;
    uint32 Y;
} SavedPos <optimize=false>;


typedef struct {
    ubyte FullMapRow[100] <comment="Whole world row, starting from right, each room is 5 bytes, each bit is one tile/pixel, total 40 horizontal tiles/pixesl per room">;
} MinimapRow <optimize=false>;


typedef struct {
    MinimapRow GridRoomRow[22] <comment="22 full world rows, denoting height of a room">;
} MinimapRowsData <optimize=false>;


enum <ushort> StampType
{
    Chest = 0,
    Heart,
    Skull,
    Diamond,
    Spiral,
    Flame,
    Grid,
    Question
};


typedef struct
{
    ushort X;
    ushort Y;
    StampType Stamp;
} StampEntry <optimize=false>;


typedef struct
{
    ubyte TotalStamps;
    StampType LastSelected;
    StampEntry PlacedStamps[64];
} StampData <optimize=false>;


typedef struct (uint32 bytelen) {
    ubyte pad[bytelen];
} RemainingFill;
    

typedef struct (ubyte slot)
{
    Timestamp SlotTime <bgcolor=0xFFD2EE>;
    ubyte pad0[18] <hidden=true>;
    ushort CrankLevel;
    ushort CrankLevel2;
    ubyte pad1[234] <hidden=true>;
    uint32 Steps  <bgcolor=0xFFD2EE>;
    ubyte pad2[20] <hidden=true>;
    GenericFlags64 OpenedChests;
    GenericFlags64 OpenedChests2;
    ubyte pad2_1[7] <hidden=true>;
    ubyte ButtonDoor1 <hidden=true>;
    ubyte pad3[16] <hidden=true>;
    ubyte ButtonDoor2 <hidden=true>;
    ubyte ButtonDoor3 <hidden=true>;
    ubyte pad4[62] <hidden=true>;
    Eggs EggsOwned;
    ubyte pad4_1[8] <hidden=true>;
    BunnyData Bunnies;
    ubyte pad4_2[12] <hidden=true>;
    ushort TimesSaved;
    ubyte pad5[8] <hidden=true>;
    ubyte Matches <bgcolor=0xD2FFD6>;
    ubyte FireCrackers <bgcolor=0xD2FFD6>;
    uint32 Hearts <bgcolor=0xFFD2EE>;
    uint32 Unk1;
    uint32 TicksIngame  <bgcolor=0xFFD2EE>;
    uint32 TicksTotal  <bgcolor=0xFFD2EE>;
    ubyte pad6[16] <hidden=true>;
    SavedPos SavedRoomPos <bgcolor=0xCACAFF>;    
    Equipment OwnedEquipment <bgcolor=0xD2FFD6>;
    OtherItems Items1 <bgcolor=0xD2FFD6>;
    ubyte pad7[3] <hidden=true>;
    ushort DeathsUnk <bgcolor=0xFFD2EE, comment="This updates along with death counter, but the relation is not known">;
    ushort Deaths <bgcolor=0xFFD2EE>;
    ubyte pad8[4] <hidden=true>;
    ubyte SelectedItem <bgcolor=0xD2FFD6>;
    ushort Unk <hidden=true>;
    AuxularyItem AuxularyItems <bgcolor=0xD2FFD6>;
    Equipment2 Upgrades <bgcolor=0xD2FFD6>;
    ubyte pad9[54] <hidden=true>;
    StampData PlacedStamps; // 387 bytes
    ubyte DynamicDataThatConstantlyUpdates[64] <hidden=true>;
    uint32 UnknownData <hidden=true>;
    MinimapRowsData RevealedMapData[24];
    ubyte Unused <hidden=true>;
    MinimapRowsData PencilMapData[24];
    ubyte Unused <hidden=true>; // do we need it?
    MinimapRowsData TileStateData[24] <comment="Deleted/erased static tiles">;
    RemainingFill unknownfill(GetRemainingSlotPadding(slot)) <bgcolor=0x919191>;
} Slot <optimize=false>;

// =====================
// FUNCTIONS
// =====================

uint32 GetRemainingSlotPadding(ubyte slot) {
    return (24 + (159760 * slot)) - FTell();
}

ubyte CalculateHash()
{
    local ubyte total = 0;
    local uint32 pos = 0;
    while (pos <= 12) {
        total = total ^ ReadUByte(pos);
        pos++;
    }
    pos = 14;
    while (pos < FileSize()) {
        total = total ^ ReadUByte(pos);
        pos++;
    }
    Printf("Save hash: %d", total);
    return total;
}

void WriteHash(ubyte &b, string s) { b = CalculateHash(); }

// =====================
// PARSING
// =====================

// Because Slot data is incomplete we parse manually for now
Header GlobalState <bgcolor=0xCACAFF>;
Assert(GlobalState.Version == 9, "Unsupported version detected");
Slot Slot1(1) <bgcolor=0xD2F2FF>;
Slot Slot2(2) <bgcolor=0xFFF2D2>;
Slot Slot3(3) <bgcolor=0xD2FFF8>;
Options Config <bgcolor=0xFFD2EE>;